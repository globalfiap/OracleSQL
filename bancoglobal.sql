/**
INTEGRANTES - ECODRIVE:

LUIS HENRIQUE 552692
SABRINA CAFÉ 553568
MATHEUS DUARTE 554199
*/


/*DROP DAS TABELAS*/
/*
DROP TABLE status_estacao_recarga CASCADE CONSTRAINTS;
DROP TABLE concessionaria CASCADE CONSTRAINTS;
DROP TABLE gasto_carregamento CASCADE CONSTRAINTS;
DROP TABLE historico_carregamento CASCADE CONSTRAINTS;
DROP TABLE reserva CASCADE CONSTRAINTS;
DROP TABLE estacao_sustentavel CASCADE CONSTRAINTS;
DROP TABLE fonte_energia CASCADE CONSTRAINTS;
DROP TABLE estacao_recarga CASCADE CONSTRAINTS;
DROP TABLE bairro CASCADE CONSTRAINTS;
DROP TABLE veiculo CASCADE CONSTRAINTS;
DROP TABLE usuario CASCADE CONSTRAINTS;*/

SET SERVEROUTPUT ON;



/*CRIAÇÃO DAS TABELAS*/

/*TABELA USUARIO*/
CREATE TABLE usuario (
    usuario_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    senha VARCHAR2(100) NOT NULL,
    telefone VARCHAR2(20)
);

/*TABELA VEICULO*/
CREATE TABLE veiculo (
    veiculo_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER NOT NULL,
    marca VARCHAR2(50) NOT NULL,
    modelo VARCHAR2(50) NOT NULL,
    ano NUMBER(4) NOT NULL,
    is_eletrico NUMBER(1) CHECK (is_eletrico IN (0, 1)) NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuario(usuario_id),
    CONSTRAINT uq_veiculo_marca UNIQUE (marca)
);

/*TABELA BAIRRO*/
CREATE TABLE bairro (
    bairro_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

/*TABELA ESTACAO_RECARGA*/
CREATE TABLE estacao_recarga (
    estacao_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    bairro_id NUMBER NOT NULL,
    latitude NUMBER(10, 6) NOT NULL,
    longitude NUMBER(10, 6) NOT NULL,
    tipo_carregador VARCHAR2(50) NOT NULL,
    preco_por_kwh NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (bairro_id) REFERENCES bairro(bairro_id)
);

/*TABELA FONTE_ENERGIA*/
CREATE TABLE fonte_energia (
    fonte_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    tipo_energia VARCHAR2(50) CHECK (tipo_energia IN ('Paineis Solares', 'Energia Comum')) NOT NULL
);

/*TABELA ESTACAO_SUSTENTAVEL*/
CREATE TABLE estacao_sustentavel (
    estacao_id NUMBER PRIMARY KEY,
    fonte_id NUMBER NOT NULL,
    reducao_carbono NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (fonte_id) REFERENCES fonte_energia(fonte_id),
    FOREIGN KEY (estacao_id) REFERENCES estacao_recarga(estacao_id)
);

/*TABELA RESERVA*/
CREATE TABLE reserva (
    reserva_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER NOT NULL,
    estacao_id NUMBER NOT NULL,
    data_reserva TIMESTAMP NOT NULL,
    status NUMBER(1) CHECK (status IN (0, 1)) NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuario(usuario_id),
    FOREIGN KEY (estacao_id) REFERENCES estacao_recarga(estacao_id)
);

/*TABELA HISTORICO_CARREGAMENTO*/
CREATE TABLE historico_carregamento (
    historico_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER NOT NULL,
    veiculo_id NUMBER NOT NULL,
    estacao_id NUMBER NOT NULL,
    data_carregamento TIMESTAMP NOT NULL,
    kwh_consumidos NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuario(usuario_id),
    FOREIGN KEY (veiculo_id) REFERENCES veiculo(veiculo_id),
    FOREIGN KEY (estacao_id) REFERENCES estacao_recarga(estacao_id)
);

/*TABELA GASTO_CARREGAMENTO*/
CREATE TABLE gasto_carregamento (
    gasto_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    historico_id NUMBER NOT NULL,
    custo_total NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (historico_id) REFERENCES historico_carregamento(historico_id)
);

/*TABELA CONCESSIONARIA*/
CREATE TABLE concessionaria (
    concessionaria_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    bairro_id NUMBER NOT NULL,
    marca VARCHAR2(50) NOT NULL,
    tem_estacao_recarga NUMBER(1) CHECK (tem_estacao_recarga IN (0, 1)) NOT NULL,
    FOREIGN KEY (marca) REFERENCES veiculo(marca),
    FOREIGN KEY (bairro_id) REFERENCES bairro(bairro_id)
);

/*TABELA STATUS_ESTACAO_RECARGA*/
CREATE TABLE status_estacao_recarga (
    status_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    estacao_id NUMBER NOT NULL,
    status VARCHAR2(50) CHECK (status IN ('Ativa', 'Defeituosa', 'Em Manutenção')) NOT NULL,
    ultima_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (estacao_id) REFERENCES estacao_recarga(estacao_id)
);

/******************************************/

/* CRIAÇÃO DAS PROCEDURES E FUNÇÕES*/

/*USUARIO*/
CREATE OR REPLACE PROCEDURE inserir_usuario (
    p_nome VARCHAR2,
    p_email VARCHAR2,
    p_senha VARCHAR2,
    p_telefone VARCHAR2
) AS
BEGIN
    INSERT INTO usuario (nome, email, senha, telefone)
    VALUES (p_nome, p_email, p_senha, p_telefone);
END;
/

/*VEICULO*/
CREATE OR REPLACE PROCEDURE inserir_veiculo (
    p_usuario_id NUMBER,
    p_marca VARCHAR2,
    p_modelo VARCHAR2,
    p_ano NUMBER,
    p_is_eletrico NUMBER
) AS
BEGIN
    INSERT INTO veiculo (usuario_id, marca, modelo, ano, is_eletrico)
    VALUES (p_usuario_id, p_marca, p_modelo, p_ano, p_is_eletrico);
END;
/

/*BAIRRO*/
CREATE OR REPLACE PROCEDURE inserir_bairro (
    p_nome VARCHAR2
) AS
BEGIN
    INSERT INTO bairro (nome)
    VALUES (p_nome);
END;
/

/*Estação de Recarga*/

CREATE OR REPLACE PROCEDURE inserir_estacao_recarga (
    p_nome VARCHAR2,
    p_bairro_id NUMBER,
    p_latitude NUMBER,
    p_longitude NUMBER,
    p_tipo_carregador VARCHAR2,
    p_preco_por_kwh NUMBER
) AS
BEGIN
    INSERT INTO estacao_recarga (nome, bairro_id, latitude, longitude, tipo_carregador, preco_por_kwh)
    VALUES (p_nome, p_bairro_id, p_latitude, p_longitude, p_tipo_carregador, p_preco_por_kwh);
END;
/


/*FUNÇÕES PARA VALIDAR ANO DO VEÍCULO*/
CREATE OR REPLACE FUNCTION validar_ano_veiculo (p_ano NUMBER) RETURN VARCHAR2 AS
BEGIN
    IF p_ano < 1886 OR p_ano > EXTRACT(YEAR FROM SYSDATE) THEN
        RETURN 'Ano inválido';
    ELSE
        RETURN 'Ano válido';
    END IF;
END;
/


/*FUNÇÕES PARA CALCULAR CUSTO DE CARREGAMENTO*/
CREATE OR REPLACE FUNCTION calcular_custo_carregamento (
    p_kwh_consumidos NUMBER,
    p_preco_por_kwh NUMBER
) RETURN NUMBER AS
BEGIN
    RETURN p_kwh_consumidos * p_preco_por_kwh;
END;
/

/*FUNÇÕES PARA VALIDAR STATUS DE ESTAÇÃO*/
CREATE OR REPLACE FUNCTION validar_status_estacao (p_status VARCHAR2) RETURN VARCHAR2 AS
BEGIN
    IF p_status NOT IN ('Ativa', 'Defeituosa', 'Em Manutenção') THEN
        RETURN 'Status inválido';
    ELSE
        RETURN 'Status válido';
    END IF;
END;
/

/*****************************************/

/**INSERÇÃO DE REGISTROS*/
BEGIN
    -- Inserir Usuários
    inserir_usuario('João Silva', 'joao@email.com', 'senha123', '11987654321');
    inserir_usuario('Maria Oliveira', 'maria@email.com', 'senha456', '11998765432');
    inserir_usuario('Carlos Souza', 'carlos@email.com', 'senha789', '11912345678');
    inserir_usuario('Ana Lima', 'ana@email.com', 'senha123', '11987654345');
    inserir_usuario('Pedro Alves', 'pedro@email.com', 'senha456', '11976543210');

    -- Inserir Bairros
    inserir_bairro('Centro');
    inserir_bairro('Zona Sul');
    inserir_bairro('Zona Norte');
    inserir_bairro('Vila Olímpia');
    inserir_bairro('Moema');

    -- Inserir Veículos
    inserir_veiculo(1, 'Tesla', 'Model S', 2022, 1);
    inserir_veiculo(2, 'Nissan', 'Leaf', 2020, 1);
    inserir_veiculo(3, 'Toyota', 'Corolla', 2018, 0);
    inserir_veiculo(4, 'Ford', 'Focus', 2019, 0);
    inserir_veiculo(5, 'BMW', 'i3', 2021, 1);

    -- Inserir Estações de Recarga
    inserir_estacao_recarga('Estação Centro', 1, -23.5505, -46.6333, 'Rápido', 1.50);
    inserir_estacao_recarga('Estação Zona Sul', 2, -23.6231, -46.7020, 'Lento', 1.20);
    inserir_estacao_recarga('Estação Zona Norte', 3, -23.5140, -46.6309, 'Rápido', 1.40);
    inserir_estacao_recarga('Estação Vila Olímpia', 4, -23.5949, -46.6884, 'Lento', 1.10);
    inserir_estacao_recarga('Estação Moema', 5, -23.6012, -46.6674, 'Rápido', 1.30);
END;
/



/*****************************************/
/**TESTE DAS FUNÇÕES**/

SELECT validar_ano_veiculo(2025) FROM DUAL;
SELECT validar_ano_veiculo(2020) FROM DUAL;

SELECT calcular_custo_carregamento(50, 1.5) FROM DUAL;
SELECT calcular_custo_carregamento(20, 2.0) FROM DUAL;

SELECT validar_status_estacao('Ativa') FROM DUAL;
SELECT validar_status_estacao('Inativo') FROM DUAL;

/* VALIDAÇÃO DO TELEFONE */

CREATE OR REPLACE FUNCTION validar_telefone(p_telefone VARCHAR2) RETURN VARCHAR2 AS
    v_regex_pattern CONSTANT VARCHAR2(20) := '^\d{10,11}$';
BEGIN
    IF REGEXP_LIKE(p_telefone, v_regex_pattern) THEN
        RETURN 'Telefone válido';
    ELSE
        RETURN 'Telefone inválido';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Erro ao validar telefone';
END;
/

SELECT validar_telefone('11987654321') FROM DUAL; 
SELECT validar_telefone('1234') FROM DUAL;       
SELECT validar_telefone(NULL) FROM DUAL;     


/** JSON - EXPORTAÇÃO DO DATASET*/

CREATE TABLE dataset_exportado (
    dataset_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    json_data CLOB NOT NULL,
    data_exportacao TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE PROCEDURE exportar_dataset_json AS
    v_json_clob CLOB;
BEGIN
    -- Geração do JSON a partir de uma consulta SQL
    SELECT JSON_OBJECT(
        'usuarios' VALUE JSON_ARRAYAGG(
            JSON_OBJECT(
                'usuario_id' VALUE usuario_id,
                'nome' VALUE nome,
                'email' VALUE email,
                'telefone' VALUE telefone
            )
        )
    ) INTO v_json_clob
    FROM usuario;

    /*VERIFICAR SE A TABELA DATASET EXISTE*/
    BEGIN
        EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM dataset_exportado';
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Tabela dataset_exportado não encontrada.');
            RETURN;
    END;

   /* PARA INSERIR O JSON GERADO NA TABELA */
    INSERT INTO dataset_exportado(json_data) VALUES (v_json_clob);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nenhum dado encontrado para exportação.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao exportar dataset: ' || SQLERRM);
END;
/




